class Solution {
    
    public void findCombinations(int[] candidates, int ind, int target, List<List<Integer>> ans, List<Integer> ds){

    if(ind == candidates.length){
        if(target==0){
            ans.add(new ArrayList<>(ds));
        }
        return;
    }

    if(candidates[ind] <= target){
        ds.add(candidates[ind]);
        findCombinations(candidates, ind, target - candidates[ind], ans, ds);
        ds.remove(ds.size() - 1);
    }

    findCombinations(candidates, ind + 1, target, ans, ds);
    

    }
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        findCombinations(candidates, 0, target, ans, new ArrayList<>());
        return ans;
    }
}
